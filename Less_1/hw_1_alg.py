# возвращает левого потомка `A[i]`
def LEFT(i):
    return 2 * i + 1


# возвращает правого потомка `A[i]`
def RIGHT(i):
    return 2 * i + 2


# Вспомогательная функция для замены двух индексов в списке
def swap(A, i, j):
    temp = A[i]
    A[i] = A[j]
    A[j] = temp


# Рекурсивный алгоритм heapify-down. Узел с индексом `i` и
# два его прямых потомка нарушают свойство кучи
def heapify(A, i, size):
    # получает левый и правый потомки узла с индексом `i`
    left = LEFT(i)
    right = RIGHT(i)

    largest = i

    # сравнивает `A[i]` с его левым и правым дочерними элементами
    # и найти наибольшее значение
    if left < size and A[left] > A[i]:
        largest = left

    if right < size and A[right] > A[largest]:
        largest = right

    # поменяться местами с ребенком, имеющим большую ценность и
    # вызывает heapify-down для ребенка
    if largest != i:
        swap(A, i, largest)
        heapify(A, largest, size)


# Функция удаления элемента с наивысшим приоритетом (присутствует в корне)
def pop(A, size):
    # , если в куче нет элементов
    if size <= 0:
        return -1

    top = A[0]

    # заменить корень кучи последним элементом
    # списка
    A[0] = A[size - 1]

    # вызывает heapify-down на корневом узле
    heapify(A, 0, size - 1)

    return top


# Функция для выполнения пирамидальной сортировки в списке `A` размера `n`
def heapsort(A):
    # создает приоритетную очередь и инициализирует ее заданным списком
    n = len(A)

    # Build-heap: вызывать heapify, начиная с последнего внутреннего
    # Узел # вплоть до корневого узла
    i = (n - 2) // 2
    while i >= 0:
        heapify(A, i, n)
        i = i - 1

    # постоянно выталкивается из кучи, пока она не станет пустой
    while n:
        A[n - 1] = pop(A, n)
        n = n - 1


if __name__ == '__main__':
    A = [6, 4, 7, 1, 9, -2]

    # выполняет пирамидальную сортировку списка
    heapsort(A)

    # распечатать отсортированный список
    print(A)